{"version":3,"sources":["Tables.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Tables","renderHeader","_","map","keys","_this","props","data","e","index","react_default","a","createElement","key","renderTableData","values","Table","striped","bordered","hover","this","PureComponent","Header","menuChange","menu","_this2","className","type","value","source","disabled","Dropdown","Toggle","variant","id","Menu","Item","onSelect","onClick","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","tableHeader","tableData","callApi","link","fetch","then","response","json","setState","Header_Header","Tables_Tables","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bbe73c0d.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport {Table} from 'react-bootstrap';\nimport _ from 'lodash';\n\n\nexport default class Tables extends PureComponent {\n  renderHeader = () => {\n    return _.map(_.keys(this.props.data[0]),(e, index) => {return (<th key={index}>{e}</th>)});\n   }\n  \n   renderTableData = () => {\n     return _.map(this.props.data, (e) => {\n        let data = _.values(e);\n        return (<tr>{_.map(data, (e, index) => { return (<td key={index}>{e}</td>) })}</tr>)\n      })\n  \n  \n   }\n  render() {\n    return (\n      <div>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              {this.renderHeader()}\n            </tr>\n          </thead>\n          <tbody>\n          {this.renderTableData()}\n          </tbody>\n      </Table>\n      </div>\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\nimport {Dropdown} from 'react-bootstrap';\n\nexport default class Header extends PureComponent {\n  menuChange = (menu) => {\n    this.props.menuChange(menu);\n  }\n\n  render() {\n    return (\n      <div>\n         <div >\n          <label className=\"labelClass\">Current Source:</label>\n          <input type=\"text\" value={this.props.source} className=\"inputField\" disabled/>\n        </div>\n        <Dropdown>\n        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" className=\"dropdownClass\">\n          Select Source\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item onSelect={(e)=>this.menuChange('posts')}>Posts</Dropdown.Item>\n          <Dropdown.Item onClick={(e)=>this.menuChange('comments')}>Comments</Dropdown.Item>\n          <Dropdown.Item onClick={(e)=>this.menuChange('todos')}>Todos</Dropdown.Item>\n        </Dropdown.Menu>\n        </Dropdown>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Tables from './Tables';\nimport Header from './Header';\nimport _ from 'lodash';\nclass App extends React.PureComponent {\n  state = {\n    source:'https://jsonplaceholder.typicode.com/posts',\n    tableHeader:[],\n    tableData: [],\n  };\n\n  constructor(props) {\n    super(props);\n    this.callApi(this.state.source);\n}\n  callApi = (link) => {\n    fetch(link)\n    .then(response => response.json())\n    .then(json => {\n      let tableHeader = _.keys(json[0]);\n      this.setState({tableHeader, tableData: json, source:link});\n    });\n  }\n  menuChange = (menu) => {\n    let link = '';\n    switch(menu) {\n      case 'posts': link = 'https://jsonplaceholder.typicode.com/posts'; break;\n      case 'todos': link = 'https://jsonplaceholder.typicode.com/todos'; break;\n      case 'comments': link = 'https://jsonplaceholder.typicode.com/comments'; break;\n      default : link = 'https://jsonplaceholder.typicode.com/posts'; break;\n    }\n    this.callApi(link);\n  }\n  render() {\n    return (\n    <div>\n      <Header menuChange={this.menuChange} source={this.state.source}/>\n      <Tables data={this.state.tableData}/>\n    </div> )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}