{"version":3,"sources":["constants/App.constant.js","containers/Tables.js","reducers/App.reducer.js","App.js","actions/App.actions.js","serviceWorker.js","reducers/index.js","reducers/Table.reducer.js","utils/request.js","utils/api.js","sagas/App.saga.js","store/index.js","index.js"],"names":["FETCH_DATA","FETCH_SUCCESS","Tables","renderHeader","console","log","_this","props","_","map","jsonData","e","react_default","a","createElement","renderTableData","data","values","this","PureComponent","compose","initialState","fromJS","source","fetch","isFetching","errorMessage","AppReducer","state","arguments","length","undefined","action","type","setIn","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toJS","fetchData","React","withConnect","connect","dispatch","link","Boolean","window","location","hostname","match","combineReducers","table","parseJSON","response","status","json","checkStatus","error","Error","statusText","then","parsedResponse","request","url","options","requestWrapper","getData","_ref","requestURL","method","body","regenerator_default","wrap","_context","prev","next","sent","abrupt","t0","stop","_marked","_context2","_marked2","sagas","put","finish","App_saga_marked","takeLatest","App_saga_marked2","sagaMiddleware","createSagaMiddleware","middlewares","enhancers","applyMiddleware","apply","composeEnhancers","store","createStore","reducer","run","runSaga","injectedReducers","injectedSagas","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5658e9f.chunk.js","sourcesContent":["export const FETCH_DATA='App/FETCH_DATA';\nexport const FETCH_SUCCESS='App/FETCH_SUCCESS';","import React, { PureComponent } from 'react'\nimport {Table} from 'react-bootstrap';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\n\nclass Tables extends PureComponent {\n  renderHeader = () => {\n    console.log(this.props);\n    return _.map(this.props.jsonData[0],(e) => {return (<th>{e}</th>)});\n   }\n  \n   renderTableData = () => {\n     return _.map(this.props.jsonData, (e) => {\n        let data = _.values(e);\n        return (<tr> {_.map(data, (e) => { return (<td>{e}</td>) })}</tr>)\n      })\n   }\n  \n  render() {\n    console.log(this.props);\n    return (\n      <div>\n        {/* <Table striped bordered hover>\n          <thead>\n            <tr>\n              {this.renderHeader()}\n            </tr>\n          </thead>\n          <tbody>\n            {this.renderTableData()}\n          </tbody>\n      </Table> */}\n      </div>\n    )\n  }\n}\n\nTables.propTypes = {\n  jsonData: PropTypes.array.isRequired,\n  handleCountryFetch: PropTypes.func.isRequired,\n}\n\n// const withConnect = connect(\n//   mapStateToProps,\n//   mapDispatchToProps,\n// );\n\nexport default compose(\n)(Tables);\n","import {FETCH_DATA, FETCH_SUCCESS} from '../constants/App.constant';\nimport { fromJS } from 'immutable';\n\nexport const initialState = fromJS({\n  source:'https://jsonplaceholder.typicode.com/posts',\n  jsonData: [],\n  fetch: {\n    isFetching: false,\n    errorMessage: null,\n  },\n});\n\nfunction AppReducer(state = initialState, action) {\n  switch(action.type) {\n    case FETCH_DATA: return state\n                    .setIn(['fetch', 'isFetching'], true)\n                    .setIn(['fetch', 'errorMessage'], null);\n    case FETCH_SUCCESS: return state\n                      .setIn(['jsonData'], fromJS(action.data))\n                      .setIn(['fetch', 'isFetching'], false)\n                      .setIn(['fetch', 'errorMessage'], null);\n    default: return state;\n  }\n}\n\nexport default AppReducer;","import React from \"react\";\nimport { Table, Dropdown } from \"react-bootstrap\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { fetchData } from \"./actions/App.actions\";\nimport \"./App.css\";\nimport Tables from \"./containers/Tables\";\n\nimport { initialState } from \"./reducers/App.reducer\";\nclass App extends React.PureComponent {\n  componentWillMount() {\n    console.log(\"props\", this.props);\n    this.props.fetchData(\"https://jsonplaceholder.typicode.com/posts\");\n  }\n\n  constructor(props) {\n    super(props);\n    console.log(\"props\", this.props);\n    this.state=initialState.toJS();\n    console.log(\"stateeee\", this.state);\n    // this.callApi(this.state.source);\n    // console.log(this.state.tableData);\n    // this.setState({tableData: result});\n    //   fetch(this.state.source)\n    //   .then(response => response.json())\n    //   .then(json => {\n    //     let tableHeader = _.keys(json[0]);\n    //     this.setState({tableHeader, tableData: json});\n\n    //     // let result = json.reduce((acc,cur) =>\n    //     // acc.push(Object.values(cur)) && acc, [Object.keys(json[0])])\n    //     // console.log('resulet', result);\n\n    // });\n  }\n\n  //  callApi(link) {\n  //   console.log('In call API',link);\n  //   fetch(link)\n  //   .then(response => this.setState({tableData: response.json()}));\n  //  }\n\n  //  renderHeader = () => {\n  //   return _.map(this.state.tableHeader,(e) => {return (<th>{e}</th>)});\n  //  }\n\n  //  renderTableData = () => {\n  //    return _.map(this.state.tableData, (e) => {\n  //       let data = _.values(e);\n  //       return (<tr> {_.map(data, (e) => { return (<td>{e}</td>) })}</tr>)\n  //     })\n\n  //  }\n\n  //   menuChange = (menu) => {\n  //     let link = '';\n  //     switch(menu) {\n  //       case 'posts': link = 'https://jsonplaceholder.typicode.com/posts'; break;\n  //       case 'todos': link = 'https://jsonplaceholder.typicode.com/todos'; break;\n  //       case 'comments': link = 'https://jsonplaceholder.typicode.com/comments'; break;\n  //       default : link = 'https://jsonplaceholder.typicode.com/posts'; break;\n  //     }\n  //     fetch(link)\n  //     .then(response => response.json())\n  //     .then(json => {\n  //       let tableHeader = _.keys(json[0]);\n  //       this.setState({tableHeader, tableData: json, source:link});\n  //   });\n  //   }\n  render() {\n    console.log(\"stat\", initialState.toJS());\n\n    return (\n      <div>\n        {/* <div >\n        <label className=\"labelClass\">Current Source:</label>\n        <input type=\"text\" value={this.state.source} className=\"inputField\" disabled/>\n      </div>\n      <Dropdown>\n        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" className=\"dropdownClass\">\n          Select Source\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n          <Dropdown.Item onSelect={(e)=>this.menuChange('posts')}>Posts</Dropdown.Item>\n          <Dropdown.Item onClick={(e)=>this.menuChange('comments')}>Comments</Dropdown.Item>\n          <Dropdown.Item onClick={(e)=>this.menuChange('todos')}>Todos</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown> */}\n\n        {/* <Tables jsonData={this.state.tableData}/> */}\n        {/* <Table striped bordered hover>\n          <thead>\n            <tr>\n              {this.renderHeader()}\n            </tr>\n          </thead>\n          <tbody>\n            {this.renderTableData()}\n          </tbody>\n      </Table> */}\n      </div>\n    );\n  }\n}\nApp.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  fetchData: PropTypes.func.isRequired\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch,\n    fetchData: link => dispatch(fetchData(link))\n  };\n}\n\nconst withConnect = connect(\n  null,\n  mapDispatchToProps\n);\n\nexport default compose(withConnect)(App);\n","import {FETCH_DATA, FETCH_SUCCESS} from '../constants/App.constant';\n\nexport function fetchData(link) {\n  return {\n    type: FETCH_DATA,\n    link,\n  };\n}\n\nexport function fetchDataSuccess(data) {\n  console.log('in action response', data);\n  return {\n    type: FETCH_SUCCESS,\n    data,\n  };\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport table from './Table.reducer';\nimport AppReducer from './App.reducer';\n\n\nexport default combineReducers({\n  table,\n  AppReducer,\n});\n","export default function table(state = '') {\n  return state;\n}\n","import 'whatwg-fetch';\n\n/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  const error = new Error(response.statusText);\n  return response.json().then(parsedResponse => {\n    error.response = parsedResponse;\n    throw error;\n  });\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport default function request(url, options) {\n  return fetch(url, options)\n    .then(checkStatus)\n    .then(parseJSON);\n}\n","import { call } from 'redux-saga/effects';\nimport request from './request';\n\nfunction* requestWrapper({ requestURL, method, body }) {\n  try {\n    const response = yield call(request, requestURL, {\n      method,\n      body,\n    });\n    return response;\n  } catch (error) {throw error;}\n}\n\nexport function* getData(link) {\n  const response = yield call(requestWrapper, {\n    requestURL: link,\n    method: 'GET',\n  });\n  return response;\n}","import { call, put, takeLatest } from 'redux-saga/effects';\n\nimport { fetchDataSuccess } from '../actions/App.actions';\nimport {FETCH_DATA} from '../constants/App.constant';\nimport {getData} from '../utils/api';\n\nexport function* fetchData({ link }) {\n  console.log('In saga');\n  try {\n    const response = yield call(getData, link);\n    yield put(fetchDataSuccess(response));\n  } catch (error) {\n  } finally {\n  }\n}\n\n\nexport default function* sagas() {\n  yield takeLatest(FETCH_DATA, fetchData);\n\n}","import { createStore, applyMiddleware, compose} from \"redux\";\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers/index';\nimport App from '../sagas/App.saga'\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\nconst enhancers = [applyMiddleware(...middlewares)];\n// If Redux DevTools Extension is installed use it, otherwise use Redux compose\n  /* eslint-disable no-underscore-dangle, indent */\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n          // TODO Try to remove when `react-router-redux` is out of beta, LOCATION_CHANGE should not be fired more than once after hot reloading\n          // Prevent recomputing reducers for `replaceReducer`\n          shouldHotReload: false,\n        })\n      : compose;\n\nconst store = createStore(reducer,composeEnhancers(...enhancers));\nsagaMiddleware.run(App);\nstore.runSaga = sagaMiddleware.run;\nstore.injectedReducers = {}; // Reducer registry\nstore.injectedSagas = {}; // Saga registry\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport store from './store/index';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n<Provider store={store}>\n<App />\n</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}